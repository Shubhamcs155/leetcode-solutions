Intuition
If we see carefully, individual numbers in roman representation are decreasing(not strictly).

Approach
So you have to make sorted vector of pair of standard numbers and their string Roman representation with 4,9,40,90,400 and 900.

Then find the number which is equal to current number. If you found match and roman representation of that number to answer. Otherwise use number just smaller than current number which is in map.

Each time we have to decrement that number until it becomes zero.

For ex:
num = 47

ans = ""

We will get 40 ==> "XL"

now ans = "XL" and num = 47-40 = 7;

We will get 5 ==> "V"

now ans = "XLV" and num = 7-5 = 2;

then we will get 1 and 1.

So final answer is "XLVII"

Complexity
Time complexity:
O(30)*log(30) ~ O(1)

Space complexity:
O(13) ~ O(1)

Code
class Solution {
public:
    int getid(vector<pair<int,string>>&v,int k){
        int st = 0,ed = v.size()-1;
        while(st<=ed){
            int mid = (st+ed)/2;
            if(v[mid].first==k)
                return mid;
            else if(v[mid].first<k)
                st = mid + 1;
            else
                ed = mid - 1;
        }
        return ed;
    }

    string intToRoman(int num) {
        vector<pair<int,string>>v{{1, "I"}
        ,{4, "IV"}
        ,{5, "V"}
        ,{9, "IX"}
        ,{10, "X"}
        ,{40, "XL"}
        ,{50, "L"}
        ,{90, "XC"}
        ,{100, "C"}
        ,{400, "CD"}
        ,{500, "D"}
        ,{900, "CM"}
        ,{1000, "M"}};
        
        string ans = "";
        while(num){
            int id = getid(v,num);
            ans += v[id].second;
            num -= v[id].first;
        }

        return ans;
    }
};
